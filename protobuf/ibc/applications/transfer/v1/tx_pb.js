/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

const jspb = require('google-protobuf');

const goog = jspb;
const global = Function('return this')();

const gogoproto_gogo_pb = require('../../../../gogoproto/gogo_pb.js');
const cosmos_base_v1beta1_coin_pb = require('../../../../cosmos/base/v1beta1/coin_pb.js');
const ibc_core_client_v1_client_pb = require('../../../core/client/v1/client_pb.js');

goog.exportSymbol('proto.ibc.applications.transfer.v1.MsgTransfer', null, global);
goog.exportSymbol('proto.ibc.applications.transfer.v1.MsgTransferResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.transfer.v1.MsgTransfer = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.applications.transfer.v1.MsgTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ibc.applications.transfer.v1.MsgTransfer.displayName = 'proto.ibc.applications.transfer.v1.MsgTransfer';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.ibc.applications.transfer.v1.MsgTransfer.prototype.toObject = function (opt_includeInstance) {
    return proto.ibc.applications.transfer.v1.MsgTransfer.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.applications.transfer.v1.MsgTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.ibc.applications.transfer.v1.MsgTransfer.toObject = function (includeInstance, msg) {
    let f; const
      obj = {
        sourcePort: jspb.Message.getFieldWithDefault(msg, 1, ''),
        sourceChannel: jspb.Message.getFieldWithDefault(msg, 2, ''),
        token: (f = msg.getToken()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
        sender: jspb.Message.getFieldWithDefault(msg, 4, ''),
        receiver: jspb.Message.getFieldWithDefault(msg, 5, ''),
        timeoutHeight: (f = msg.getTimeoutHeight()) && ibc_core_client_v1_client_pb.Height.toObject(includeInstance, f),
        timeoutTimestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.transfer.v1.MsgTransfer}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.ibc.applications.transfer.v1.MsgTransfer();
  return proto.ibc.applications.transfer.v1.MsgTransfer.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.transfer.v1.MsgTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.transfer.v1.MsgTransfer}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.setSourcePort(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setSourceChannel(value);
        break;
      case 3:
        var value = new cosmos_base_v1beta1_coin_pb.Coin();
        reader.readMessage(value, cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
        msg.setToken(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readString());
        msg.setSender(value);
        break;
      case 5:
        var value = /** @type {string} */ (reader.readString());
        msg.setReceiver(value);
        break;
      case 6:
        var value = new ibc_core_client_v1_client_pb.Height();
        reader.readMessage(value, ibc_core_client_v1_client_pb.Height.deserializeBinaryFromReader);
        msg.setTimeoutHeight(value);
        break;
      case 7:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTimeoutTimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.ibc.applications.transfer.v1.MsgTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.transfer.v1.MsgTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.MsgTransfer.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getSourcePort();
  if (f.length > 0) {
    writer.writeString(
      1,
      f,
    );
  }
  f = message.getSourceChannel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f,
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter,
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      4,
      f,
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      5,
      f,
    );
  }
  f = message.getTimeoutHeight();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      ibc_core_client_v1_client_pb.Height.serializeBinaryToWriter,
    );
  }
  f = message.getTimeoutTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f,
    );
  }
};

/**
 * optional string source_port = 1;
 * @return {string}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getSourcePort = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/** @param {string} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setSourcePort = function (value) {
  jspb.Message.setProto3StringField(this, 1, value);
};

/**
 * optional string source_channel = 2;
 * @return {string}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getSourceChannel = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setSourceChannel = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional cosmos.base.v1beta1.Coin token = 3;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getToken = function () {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 3));
};

/** @param {?proto.cosmos.base.v1beta1.Coin|undefined} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setToken = function (value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.ibc.applications.transfer.v1.MsgTransfer.prototype.clearToken = function () {
  this.setToken(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.hasToken = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional string sender = 4;
 * @return {string}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getSender = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ''));
};

/** @param {string} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setSender = function (value) {
  jspb.Message.setProto3StringField(this, 4, value);
};

/**
 * optional string receiver = 5;
 * @return {string}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getReceiver = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''));
};

/** @param {string} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setReceiver = function (value) {
  jspb.Message.setProto3StringField(this, 5, value);
};

/**
 * optional ibc.core.client.v1.Height timeout_height = 6;
 * @return {?proto.ibc.core.client.v1.Height}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getTimeoutHeight = function () {
  return /** @type{?proto.ibc.core.client.v1.Height} */ (
    jspb.Message.getWrapperField(this, ibc_core_client_v1_client_pb.Height, 6));
};

/** @param {?proto.ibc.core.client.v1.Height|undefined} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setTimeoutHeight = function (value) {
  jspb.Message.setWrapperField(this, 6, value);
};

proto.ibc.applications.transfer.v1.MsgTransfer.prototype.clearTimeoutHeight = function () {
  this.setTimeoutHeight(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.hasTimeoutHeight = function () {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional uint64 timeout_timestamp = 7;
 * @return {number}
 */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.getTimeoutTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};

/** @param {number} value */
proto.ibc.applications.transfer.v1.MsgTransfer.prototype.setTimeoutTimestamp = function (value) {
  jspb.Message.setProto3IntField(this, 7, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ibc.applications.transfer.v1.MsgTransferResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ibc.applications.transfer.v1.MsgTransferResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ibc.applications.transfer.v1.MsgTransferResponse.displayName = 'proto.ibc.applications.transfer.v1.MsgTransferResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.ibc.applications.transfer.v1.MsgTransferResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.ibc.applications.transfer.v1.MsgTransferResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ibc.applications.transfer.v1.MsgTransferResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.ibc.applications.transfer.v1.MsgTransferResponse.toObject = function (includeInstance, msg) {
    let f; const
      obj = {

      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ibc.applications.transfer.v1.MsgTransferResponse}
 */
proto.ibc.applications.transfer.v1.MsgTransferResponse.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.ibc.applications.transfer.v1.MsgTransferResponse();
  return proto.ibc.applications.transfer.v1.MsgTransferResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ibc.applications.transfer.v1.MsgTransferResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ibc.applications.transfer.v1.MsgTransferResponse}
 */
proto.ibc.applications.transfer.v1.MsgTransferResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ibc.applications.transfer.v1.MsgTransferResponse.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.ibc.applications.transfer.v1.MsgTransferResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ibc.applications.transfer.v1.MsgTransferResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ibc.applications.transfer.v1.MsgTransferResponse.serializeBinaryToWriter = function (message, writer) {
  const f;
};

goog.object.extend(exports, proto.ibc.applications.transfer.v1);
