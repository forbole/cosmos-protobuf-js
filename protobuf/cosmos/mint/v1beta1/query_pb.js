/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

const jspb = require('google-protobuf');

const goog = jspb;
const global = Function('return this')();

const gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
const google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
const cosmos_mint_v1beta1_mint_pb = require('./mint_pb.js');

goog.exportSymbol('proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest', null, global);
goog.exportSymbol('proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse', null, global);
goog.exportSymbol('proto.cosmos.mint.v1beta1.QueryInflationRequest', null, global);
goog.exportSymbol('proto.cosmos.mint.v1beta1.QueryInflationResponse', null, global);
goog.exportSymbol('proto.cosmos.mint.v1beta1.QueryParamsRequest', null, global);
goog.exportSymbol('proto.cosmos.mint.v1beta1.QueryParamsResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.mint.v1beta1.QueryParamsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.mint.v1beta1.QueryParamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cosmos.mint.v1beta1.QueryParamsRequest.displayName = 'proto.cosmos.mint.v1beta1.QueryParamsRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.cosmos.mint.v1beta1.QueryParamsRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.cosmos.mint.v1beta1.QueryParamsRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.mint.v1beta1.QueryParamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.cosmos.mint.v1beta1.QueryParamsRequest.toObject = function (includeInstance, msg) {
    let f; const
      obj = {

      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.mint.v1beta1.QueryParamsRequest}
 */
proto.cosmos.mint.v1beta1.QueryParamsRequest.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.cosmos.mint.v1beta1.QueryParamsRequest();
  return proto.cosmos.mint.v1beta1.QueryParamsRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.mint.v1beta1.QueryParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.mint.v1beta1.QueryParamsRequest}
 */
proto.cosmos.mint.v1beta1.QueryParamsRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryParamsRequest.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.cosmos.mint.v1beta1.QueryParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.mint.v1beta1.QueryParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.mint.v1beta1.QueryParamsRequest.serializeBinaryToWriter = function (message, writer) {
  const f;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.mint.v1beta1.QueryParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cosmos.mint.v1beta1.QueryParamsResponse.displayName = 'proto.cosmos.mint.v1beta1.QueryParamsResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.cosmos.mint.v1beta1.QueryParamsResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cosmos.mint.v1beta1.QueryParamsResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.mint.v1beta1.QueryParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.cosmos.mint.v1beta1.QueryParamsResponse.toObject = function (includeInstance, msg) {
    let f; const
      obj = {
        params: (f = msg.getParams()) && cosmos_mint_v1beta1_mint_pb.Params.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.mint.v1beta1.QueryParamsResponse}
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.cosmos.mint.v1beta1.QueryParamsResponse();
  return proto.cosmos.mint.v1beta1.QueryParamsResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.mint.v1beta1.QueryParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.mint.v1beta1.QueryParamsResponse}
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new cosmos_mint_v1beta1_mint_pb.Params();
        reader.readMessage(value, cosmos_mint_v1beta1_mint_pb.Params.deserializeBinaryFromReader);
        msg.setParams(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.cosmos.mint.v1beta1.QueryParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.mint.v1beta1.QueryParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_mint_v1beta1_mint_pb.Params.serializeBinaryToWriter,
    );
  }
};

/**
 * optional Params params = 1;
 * @return {?proto.cosmos.mint.v1beta1.Params}
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse.prototype.getParams = function () {
  return /** @type{?proto.cosmos.mint.v1beta1.Params} */ (
    jspb.Message.getWrapperField(this, cosmos_mint_v1beta1_mint_pb.Params, 1));
};

/** @param {?proto.cosmos.mint.v1beta1.Params|undefined} value */
proto.cosmos.mint.v1beta1.QueryParamsResponse.prototype.setParams = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.cosmos.mint.v1beta1.QueryParamsResponse.prototype.clearParams = function () {
  this.setParams(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.cosmos.mint.v1beta1.QueryParamsResponse.prototype.hasParams = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.mint.v1beta1.QueryInflationRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.mint.v1beta1.QueryInflationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cosmos.mint.v1beta1.QueryInflationRequest.displayName = 'proto.cosmos.mint.v1beta1.QueryInflationRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.cosmos.mint.v1beta1.QueryInflationRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.cosmos.mint.v1beta1.QueryInflationRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.mint.v1beta1.QueryInflationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.cosmos.mint.v1beta1.QueryInflationRequest.toObject = function (includeInstance, msg) {
    let f; const
      obj = {

      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.mint.v1beta1.QueryInflationRequest}
 */
proto.cosmos.mint.v1beta1.QueryInflationRequest.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.cosmos.mint.v1beta1.QueryInflationRequest();
  return proto.cosmos.mint.v1beta1.QueryInflationRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.mint.v1beta1.QueryInflationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.mint.v1beta1.QueryInflationRequest}
 */
proto.cosmos.mint.v1beta1.QueryInflationRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryInflationRequest.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.cosmos.mint.v1beta1.QueryInflationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.mint.v1beta1.QueryInflationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.mint.v1beta1.QueryInflationRequest.serializeBinaryToWriter = function (message, writer) {
  const f;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.mint.v1beta1.QueryInflationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cosmos.mint.v1beta1.QueryInflationResponse.displayName = 'proto.cosmos.mint.v1beta1.QueryInflationResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.cosmos.mint.v1beta1.QueryInflationResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cosmos.mint.v1beta1.QueryInflationResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.mint.v1beta1.QueryInflationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.cosmos.mint.v1beta1.QueryInflationResponse.toObject = function (includeInstance, msg) {
    let f; const
      obj = {
        inflation: msg.getInflation_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.mint.v1beta1.QueryInflationResponse}
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.cosmos.mint.v1beta1.QueryInflationResponse();
  return proto.cosmos.mint.v1beta1.QueryInflationResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.mint.v1beta1.QueryInflationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.mint.v1beta1.QueryInflationResponse}
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setInflation(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.cosmos.mint.v1beta1.QueryInflationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.mint.v1beta1.QueryInflationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getInflation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f,
    );
  }
};

/**
 * optional bytes inflation = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.prototype.getInflation = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes inflation = 1;
 * This is a type-conversion wrapper around `getInflation()`
 * @return {string}
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.prototype.getInflation_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getInflation(),
  ));
};

/**
 * optional bytes inflation = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getInflation()`
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryInflationResponse.prototype.getInflation_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getInflation(),
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.cosmos.mint.v1beta1.QueryInflationResponse.prototype.setInflation = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.displayName = 'proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.prototype.toObject = function (opt_includeInstance) {
    return proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.toObject = function (includeInstance, msg) {
    let f; const
      obj = {

      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest();
  return proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsRequest.serializeBinaryToWriter = function (message, writer) {
  const f;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.displayName = 'proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.prototype.toObject = function (opt_includeInstance) {
    return proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.toObject(opt_includeInstance, this);
  };

  /**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.toObject = function (includeInstance, msg) {
    let f; const
      obj = {
        annualProvisions: msg.getAnnualProvisions_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.deserializeBinary = function (bytes) {
  const reader = new jspb.BinaryReader(bytes);
  const msg = new proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse();
  return proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    const field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAnnualProvisions(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.prototype.serializeBinary = function () {
  const writer = new jspb.BinaryWriter();
  proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.serializeBinaryToWriter = function (message, writer) {
  let f;
  f = message.getAnnualProvisions_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f,
    );
  }
};

/**
 * optional bytes annual_provisions = 1;
 * @return {!(string|Uint8Array)}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.prototype.getAnnualProvisions = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ''));
};

/**
 * optional bytes annual_provisions = 1;
 * This is a type-conversion wrapper around `getAnnualProvisions()`
 * @return {string}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.prototype.getAnnualProvisions_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getAnnualProvisions(),
  ));
};

/**
 * optional bytes annual_provisions = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnnualProvisions()`
 * @return {!Uint8Array}
 */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.prototype.getAnnualProvisions_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getAnnualProvisions(),
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.cosmos.mint.v1beta1.QueryAnnualProvisionsResponse.prototype.setAnnualProvisions = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

goog.object.extend(exports, proto.cosmos.mint.v1beta1);
